// Code generated by Prisma (prisma@1.20.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  idea: (where?: IdeaWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userLogin: (where?: UserLoginWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  idea: (where: IdeaWhereUniqueInput) => IdeaPromise;
  ideas: (
    args?: {
      where?: IdeaWhereInput;
      orderBy?: IdeaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Idea>;
  ideasConnection: (
    args?: {
      where?: IdeaWhereInput;
      orderBy?: IdeaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => IdeaConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userLogin: (where: UserLoginWhereUniqueInput) => UserLoginPromise;
  userLogins: (
    args?: {
      where?: UserLoginWhereInput;
      orderBy?: UserLoginOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserLogin>;
  userLoginsConnection: (
    args?: {
      where?: UserLoginWhereInput;
      orderBy?: UserLoginOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserLoginConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createIdea: (data: IdeaCreateInput) => IdeaPromise;
  updateIdea: (
    args: { data: IdeaUpdateInput; where: IdeaWhereUniqueInput }
  ) => IdeaPromise;
  updateManyIdeas: (
    args: { data: IdeaUpdateManyMutationInput; where?: IdeaWhereInput }
  ) => BatchPayloadPromise;
  upsertIdea: (
    args: {
      where: IdeaWhereUniqueInput;
      create: IdeaCreateInput;
      update: IdeaUpdateInput;
    }
  ) => IdeaPromise;
  deleteIdea: (where: IdeaWhereUniqueInput) => IdeaPromise;
  deleteManyIdeas: (where?: IdeaWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserLogin: (data: UserLoginCreateInput) => UserLoginPromise;
  updateUserLogin: (
    args: { data: UserLoginUpdateInput; where: UserLoginWhereUniqueInput }
  ) => UserLoginPromise;
  updateManyUserLogins: (
    args: {
      data: UserLoginUpdateManyMutationInput;
      where?: UserLoginWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserLogin: (
    args: {
      where: UserLoginWhereUniqueInput;
      create: UserLoginCreateInput;
      update: UserLoginUpdateInput;
    }
  ) => UserLoginPromise;
  deleteUserLogin: (where: UserLoginWhereUniqueInput) => UserLoginPromise;
  deleteManyUserLogins: (where?: UserLoginWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  idea: (
    where?: IdeaSubscriptionWhereInput
  ) => IdeaSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userLogin: (
    where?: UserLoginSubscriptionWhereInput
  ) => UserLoginSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type IdeaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "publicHash_ASC"
  | "publicHash_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserLoginOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "temporaryCode_ASC"
  | "temporaryCode_DESC"
  | "ip_ASC"
  | "ip_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type IdeaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  publicHash?: String;
}>;

export interface IdeaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  publicHash?: String;
  publicHash_not?: String;
  publicHash_in?: String[] | String;
  publicHash_not_in?: String[] | String;
  publicHash_lt?: String;
  publicHash_lte?: String;
  publicHash_gt?: String;
  publicHash_gte?: String;
  publicHash_contains?: String;
  publicHash_not_contains?: String;
  publicHash_starts_with?: String;
  publicHash_not_starts_with?: String;
  publicHash_ends_with?: String;
  publicHash_not_ends_with?: String;
  AND?: IdeaWhereInput[] | IdeaWhereInput;
  OR?: IdeaWhereInput[] | IdeaWhereInput;
  NOT?: IdeaWhereInput[] | IdeaWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  ideas_every?: IdeaWhereInput;
  ideas_some?: IdeaWhereInput;
  ideas_none?: IdeaWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export type UserLoginWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserLoginWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  temporaryCode?: String;
  temporaryCode_not?: String;
  temporaryCode_in?: String[] | String;
  temporaryCode_not_in?: String[] | String;
  temporaryCode_lt?: String;
  temporaryCode_lte?: String;
  temporaryCode_gt?: String;
  temporaryCode_gte?: String;
  temporaryCode_contains?: String;
  temporaryCode_not_contains?: String;
  temporaryCode_starts_with?: String;
  temporaryCode_not_starts_with?: String;
  temporaryCode_ends_with?: String;
  temporaryCode_not_ends_with?: String;
  ip?: String;
  ip_not?: String;
  ip_in?: String[] | String;
  ip_not_in?: String[] | String;
  ip_lt?: String;
  ip_lte?: String;
  ip_gt?: String;
  ip_gte?: String;
  ip_contains?: String;
  ip_not_contains?: String;
  ip_starts_with?: String;
  ip_not_starts_with?: String;
  ip_ends_with?: String;
  ip_not_ends_with?: String;
  AND?: UserLoginWhereInput[] | UserLoginWhereInput;
  OR?: UserLoginWhereInput[] | UserLoginWhereInput;
  NOT?: UserLoginWhereInput[] | UserLoginWhereInput;
}

export interface IdeaCreateInput {
  author: UserCreateOneWithoutIdeasInput;
  title: String;
  description?: String;
  isPublic?: Boolean;
  publicHash: String;
}

export interface UserCreateOneWithoutIdeasInput {
  create?: UserCreateWithoutIdeasInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutIdeasInput {
  email: String;
  name?: String;
  firstName?: String;
  lastName?: String;
}

export interface IdeaUpdateInput {
  author?: UserUpdateOneRequiredWithoutIdeasInput;
  title?: String;
  description?: String;
  isPublic?: Boolean;
  publicHash?: String;
}

export interface UserUpdateOneRequiredWithoutIdeasInput {
  create?: UserCreateWithoutIdeasInput;
  update?: UserUpdateWithoutIdeasDataInput;
  upsert?: UserUpsertWithoutIdeasInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutIdeasDataInput {
  email?: String;
  name?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserUpsertWithoutIdeasInput {
  update: UserUpdateWithoutIdeasDataInput;
  create: UserCreateWithoutIdeasInput;
}

export interface IdeaUpdateManyMutationInput {
  title?: String;
  description?: String;
  isPublic?: Boolean;
  publicHash?: String;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  firstName?: String;
  lastName?: String;
  ideas?: IdeaCreateManyWithoutAuthorInput;
}

export interface IdeaCreateManyWithoutAuthorInput {
  create?: IdeaCreateWithoutAuthorInput[] | IdeaCreateWithoutAuthorInput;
  connect?: IdeaWhereUniqueInput[] | IdeaWhereUniqueInput;
}

export interface IdeaCreateWithoutAuthorInput {
  title: String;
  description?: String;
  isPublic?: Boolean;
  publicHash: String;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  firstName?: String;
  lastName?: String;
  ideas?: IdeaUpdateManyWithoutAuthorInput;
}

export interface IdeaUpdateManyWithoutAuthorInput {
  create?: IdeaCreateWithoutAuthorInput[] | IdeaCreateWithoutAuthorInput;
  delete?: IdeaWhereUniqueInput[] | IdeaWhereUniqueInput;
  connect?: IdeaWhereUniqueInput[] | IdeaWhereUniqueInput;
  disconnect?: IdeaWhereUniqueInput[] | IdeaWhereUniqueInput;
  update?:
    | IdeaUpdateWithWhereUniqueWithoutAuthorInput[]
    | IdeaUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | IdeaUpsertWithWhereUniqueWithoutAuthorInput[]
    | IdeaUpsertWithWhereUniqueWithoutAuthorInput;
}

export interface IdeaUpdateWithWhereUniqueWithoutAuthorInput {
  where: IdeaWhereUniqueInput;
  data: IdeaUpdateWithoutAuthorDataInput;
}

export interface IdeaUpdateWithoutAuthorDataInput {
  title?: String;
  description?: String;
  isPublic?: Boolean;
  publicHash?: String;
}

export interface IdeaUpsertWithWhereUniqueWithoutAuthorInput {
  where: IdeaWhereUniqueInput;
  update: IdeaUpdateWithoutAuthorDataInput;
  create: IdeaCreateWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserLoginCreateInput {
  email: String;
  temporaryCode: String;
  ip?: String;
}

export interface UserLoginUpdateInput {
  email?: String;
  temporaryCode?: String;
  ip?: String;
}

export interface UserLoginUpdateManyMutationInput {
  email?: String;
  temporaryCode?: String;
  ip?: String;
}

export interface IdeaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: IdeaWhereInput;
  AND?: IdeaSubscriptionWhereInput[] | IdeaSubscriptionWhereInput;
  OR?: IdeaSubscriptionWhereInput[] | IdeaSubscriptionWhereInput;
  NOT?: IdeaSubscriptionWhereInput[] | IdeaSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserLoginSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserLoginWhereInput;
  AND?: UserLoginSubscriptionWhereInput[] | UserLoginSubscriptionWhereInput;
  OR?: UserLoginSubscriptionWhereInput[] | UserLoginSubscriptionWhereInput;
  NOT?: UserLoginSubscriptionWhereInput[] | UserLoginSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Idea {
  id: ID_Output;
  title: String;
  description?: String;
  isPublic?: Boolean;
  publicHash: String;
}

export interface IdeaPromise extends Promise<Idea>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  publicHash: () => Promise<String>;
}

export interface IdeaSubscription
  extends Promise<AsyncIterator<Idea>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  publicHash: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  ideas: <T = FragmentableArray<Idea>>(
    args?: {
      where?: IdeaWhereInput;
      orderBy?: IdeaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  ideas: <T = Promise<AsyncIterator<IdeaSubscription>>>(
    args?: {
      where?: IdeaWhereInput;
      orderBy?: IdeaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface IdeaConnection {}

export interface IdeaConnectionPromise
  extends Promise<IdeaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IdeaEdge>>() => T;
  aggregate: <T = AggregateIdeaPromise>() => T;
}

export interface IdeaConnectionSubscription
  extends Promise<AsyncIterator<IdeaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IdeaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIdeaSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface IdeaEdge {
  cursor: String;
}

export interface IdeaEdgePromise extends Promise<IdeaEdge>, Fragmentable {
  node: <T = IdeaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IdeaEdgeSubscription
  extends Promise<AsyncIterator<IdeaEdge>>,
    Fragmentable {
  node: <T = IdeaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIdea {
  count: Int;
}

export interface AggregateIdeaPromise
  extends Promise<AggregateIdea>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIdeaSubscription
  extends Promise<AsyncIterator<AggregateIdea>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserLogin {
  id: ID_Output;
  email: String;
  temporaryCode: String;
  ip?: String;
}

export interface UserLoginPromise extends Promise<UserLogin>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  temporaryCode: () => Promise<String>;
  ip: () => Promise<String>;
}

export interface UserLoginSubscription
  extends Promise<AsyncIterator<UserLogin>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  temporaryCode: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
}

export interface UserLoginConnection {}

export interface UserLoginConnectionPromise
  extends Promise<UserLoginConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserLoginEdge>>() => T;
  aggregate: <T = AggregateUserLoginPromise>() => T;
}

export interface UserLoginConnectionSubscription
  extends Promise<AsyncIterator<UserLoginConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserLoginEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserLoginSubscription>() => T;
}

export interface UserLoginEdge {
  cursor: String;
}

export interface UserLoginEdgePromise
  extends Promise<UserLoginEdge>,
    Fragmentable {
  node: <T = UserLoginPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserLoginEdgeSubscription
  extends Promise<AsyncIterator<UserLoginEdge>>,
    Fragmentable {
  node: <T = UserLoginSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserLogin {
  count: Int;
}

export interface AggregateUserLoginPromise
  extends Promise<AggregateUserLogin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserLoginSubscription
  extends Promise<AsyncIterator<AggregateUserLogin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface IdeaSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface IdeaSubscriptionPayloadPromise
  extends Promise<IdeaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IdeaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IdeaPreviousValuesPromise>() => T;
}

export interface IdeaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IdeaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IdeaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IdeaPreviousValuesSubscription>() => T;
}

export interface IdeaPreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  isPublic?: Boolean;
  publicHash: String;
}

export interface IdeaPreviousValuesPromise
  extends Promise<IdeaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
  publicHash: () => Promise<String>;
}

export interface IdeaPreviousValuesSubscription
  extends Promise<AsyncIterator<IdeaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  publicHash: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
  firstName?: String;
  lastName?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
}

export interface UserLoginSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserLoginSubscriptionPayloadPromise
  extends Promise<UserLoginSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserLoginPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserLoginPreviousValuesPromise>() => T;
}

export interface UserLoginSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserLoginSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserLoginSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserLoginPreviousValuesSubscription>() => T;
}

export interface UserLoginPreviousValues {
  id: ID_Output;
  email: String;
  temporaryCode: String;
  ip?: String;
}

export interface UserLoginPreviousValuesPromise
  extends Promise<UserLoginPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  temporaryCode: () => Promise<String>;
  ip: () => Promise<String>;
}

export interface UserLoginPreviousValuesSubscription
  extends Promise<AsyncIterator<UserLoginPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  temporaryCode: () => Promise<AsyncIterator<String>>;
  ip: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Idea",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserLogin",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
